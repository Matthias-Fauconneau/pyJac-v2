/*

A cog-templated skeleton for pyJac kernel execution

OpenCL code adapted from:
    Based on https://www.olcf.ornl.gov/tutorials/opencl-vector-addition/
    and https://www.fixstars.com/en/opencl/book/OpenCLProgrammingBook/calling-the-kernel/

(C) Nicholas Curtis - 2018

Global declarations for Cog:
    - codegen: path to a serialized CallgenResult instance
    that may be loaded to generate this file
*/

#ifndef KERNEL_H
#define KERNEL_H

#include "mechanism.oclh"
#include "error_check.oclh"
#include "timer.oclh"
#include "vectorization.oclh"


#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>

extern "C" {
    #include <CL/cl.h>
}

#define NUM_PLATFORMS (16)
#define MAX_DEVICE (16)

// macro definitions

#define CL_LEVEL 120
#define PINNED


//! \\brief The base kernel class
class Kernel
{

public:
    Kernel();
    virtual ~Kernel();

    /*
    Resize kernel's working data to fit the given sizes.

    Parameters
    ----------
    problem_size : size_t
    	The total number of conditions to execute this kernel over
    work_size : size_t
    	The number of OpenCL groups to launch.
    If using GPUs, this is the # of CUDA blocks to use.
    If for CPUs, this is the number of logical cores to use.
    do_not_compile : bool
    	If true, the OpenCL kernel has already been compiled (e.g., via previous kernel call) and does not need recompilation. False by default.

     Note: If this kernel object has already been executed, the OpenCL kernel has been compiled and will not be recompiled regardless of the status of this flag.
    */

    void resize(size_t problem_size, size_t work_size, bool do_not_compile=false);

    //! \\brief Returns the ordered list of species names in the chemical model
    static std::vector<const char*> speciesNames()
    {
        return std::vector<const char*>(_species_names, _species_names + 53);
    }

    //! \\brief Returns the list of reaction strings in the chemical model
    static std::vector<const char*> reactionStrings()
    {
        return std::vector<const char*>(_rxn_strings, _rxn_strings + 325);
    }

    //! \\brief Return the data-ordering used in this kernel, either 'C' (row-major)
    //!        or 'F' (column-major)
    static const char* order()
    {
        return _order;
    }

    //! \\brief Return the number of species in the mode;
    static unsigned int numSpecies()
    {
        return _nsp;
    }

    //! \\brief Return the number of species in the mode;
    static unsigned int numReactions()
    {
        return _nrxn;
    }

    //! \brief Return the vector-width used by this kernel
    static const unsigned int vectorWidth()
    {
        return _vector_width;
    }


    /** \\brief Returns the total amount of working memory required per-thermochemical
      *        state for this kernel, in bytes.
      *
      * \note  This includes vectorization considerations.
      */
    virtual const std::size_t requiredMemorySize() const = 0;

    virtual void compile() = 0;
    // info variables -- common to all kernels

    //! \brief Return the OpenCL build options used in kernel compilation
    static const char* buildOptions() { return build_options; }
    //! \brief Return the name of the OpenCL platform used for kernel execution
    static const char* platform() { return platform_check; };
    //! \brief return the type of OpenCL device used for kernel execution
    static const unsigned int deviceType() { return Kernel::device_type; }


protected:
    size_t per_run();
    size_t per_run(size_t problem_size);
    size_t this_run(size_t offset);

    // opencl context, kernel, etc.
    cl_kernel kernel;
    cl_program program;
    cl_context context;
    cl_command_queue queue;
    // info variables -- specified per kernel
    unsigned int num_source;
    const char* kernel_path;

    static const char* build_options;
    static const char* platform_check;
    static const unsigned int device_type;

    // flags indicating initialization status, etc.
    bool initialized;
    bool compiled;

    // past run sizes
    size_t d_per_run; // store for device per-run size
    size_t problem_size;
    size_t max_per_run;
    size_t work_size;

    // info variables

    // species names
    static const char* _species_names[];
    // reaction strings
    static const char* _rxn_strings[];
    // data order
    static const char* _order;
    // vector width
    static const unsigned int _vector_width;

    // number of species
    static const unsigned int _nsp;
    // number of reactions
    static const unsigned int _nrxn;


    /*
    Create the Opencl kernel.

    Parameters
    ----------
    problem_size : size_t
    	The total number of conditions to execute this kernel over
    work_size : size_t
    	The number of OpenCL groups to launch.
    If using GPUs, this is the # of CUDA blocks to use.
    If for CPUs, this is the number of logical cores to use.
    */

    void init(size_t problem_size, size_t work_size);

    // memory initialization / release accomplished in sub-classes
    virtual void mem_init(size_t problem_size, size_t work_size) = 0;
    virtual void finalize_memory() = 0;
    void finalize();
};

// and subclass(es)
class JacobianKernel : public Kernel
{
protected:
    // declare device buffers
    cl_mem d_P_arr;
    cl_mem d_phi;
    cl_mem d_jac;
    cl_mem d_rwk;
#ifdef PINNED
    // declare temporary pointers to hold mapped addresses
    double* h_temp_d;
#endif
    void mem_init(size_t problem_size, size_t work_size);
public:
    void compile();
    /*
    Base constructor -- no arguments necessary, for use with Cython.
    JacobianKernel::resize() must be called before use.
    */
    JacobianKernel();

    /*
    Initializing constructor.

    Parameters
    ----------
    problem_size : size_t
    	The total number of conditions to execute this kernel over
    work_size : size_t
    	The number of OpenCL groups to launch.
    If using GPUs, this is the # of CUDA blocks to use.
    If for CPUs, this is the number of logical cores to use.
    do_not_compile : bool
    	If true, the OpenCL kernel has already been compiled (e.g., via previous kernel call) and does not need recompilation. False by default.

     Note: If this kernel object has already been executed, the OpenCL kernel has been compiled and will not be recompiled regardless of the status of this flag.
    */
    JacobianKernel(size_t problem_size, size_t work_size, bool do_not_compile=false);
    virtual ~JacobianKernel();

    /*
    Execute the Opencl kernel 'jacobian'

    Parameters
    ----------
    P_arr : double
    	The array of pressures.
    phi : double
    	The state vector
    jac : double
    	The Jacobian of the time-rate of change of the state vector
    */
    void operator()(double* h_P_arr, double* h_phi, double* h_jac);
    void finalize_memory();
    const std::size_t requiredMemorySize() const;
};


#endif

#include "species_rates.oclh"



__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) ndot_reset(__global double *__restrict__ dphi)
{
  for (int i = 0; i <= 53; ++i)
    dphi[128 * gid(0) + lid(0) + work_size * 128 * i] = 0.0;
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) wdot_reset(__global double *__restrict__ wdot)
{
  for (int i = 0; i <= 52; ++i)
    wdot[128 * gid(0) + lid(0) + work_size * 128 * i] = 0.0;
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) get_concentrations(__global double const *__restrict__ phi, __global double const *__restrict__ P_arr, __global double *__restrict__ conc)
{
  double T_val;
  double V_inv;
  double n;
  double n_sum;

  T_val = fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  V_inv = 1.0 / fmax(1e-30, phi[128 * gid(0) + lid(0) + work_size * 128]);
  n_sum = 0.0;
  conc[128 * gid(0) + lid(0) + work_size * 128 * 52] = P_arr[128 * gid(0) + lid(0)] / (8314.4621 * T_val);
  for (int i = 0; i <= 51; ++i)
  {
    n = fmax(1e-300, phi[128 * gid(0) + lid(0) + work_size * 128 * (2 + i)]);
    n_sum = n_sum + n;
    conc[128 * gid(0) + lid(0) + work_size * 128 * i] = n * V_inv;
  }
  conc[128 * gid(0) + lid(0) + work_size * 128 * 52] = conc[128 * gid(0) + lid(0) + work_size * 128 * 52] + -1.0 * fmax(1e-300, n_sum) * V_inv;
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) a_only_simple(__global double const *__restrict__ phi, __global double *__restrict__ kf)
{
  int i_0;
  int i_1;

  for (int i = 0; i <= 99; ++i)
  {
    i_1 = simple_rtype_0_map[i];
    i_0 = simple_rtype_0_inds[i];
    kf[128 * gid(0) + lid(0) + work_size * 128 * i_1] = simple_A[i_0];
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) beta_int_simple(__global double const *__restrict__ phi, __global double *__restrict__ kf)
{
  double Tinv;
  double Tval;
  int b_end;
  int i_0;
  int i_1;
  double kf_temp;

  Tval = fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  Tinv = 1.0 / fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  for (int i = 0; i <= 5; ++i)
  {
    i_1 = simple_rtype_1_map[i];
    i_0 = simple_rtype_1_inds[i];
    b_end = simple_beta[i_0];
    kf_temp = simple_A[i_0];
    kf_temp = kf_temp * fast_powi(Tval, b_end);
    kf[128 * gid(0) + lid(0) + work_size * 128 * i_1] = kf_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rateconst_fullsimple(__global double const *__restrict__ phi, __global double *__restrict__ kf)
{
  double Tinv;
  int i_0;
  int i_1;
  double logT;

  logT = log(fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)])));
  Tinv = 1.0 / fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  for (int i = 0; i <= 218; ++i)
  {
    i_1 = simple_rtype_2_map[i];
    i_0 = simple_rtype_2_inds[i];
    kf[128 * gid(0) + lid(0) + work_size * 128 * i_1] = exp(fmin(690.775527898, simple_A[i_0] + logT * simple_beta[i_0] + -1.0 * simple_Ta[i_0] * Tinv));
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) eval_thd_body_concs(__global double const *__restrict__ P_arr, __global double const *__restrict__ phi, __global double const *__restrict__ conc, __global double *__restrict__ thd_conc)
{
  int not_spec;
  int offset;
  int spec_end;
  int spec_ind;
  double thd_temp;

  for (int i = 0; i <= 40; ++i)
  {
    offset = thd_offset[i];
    spec_end = thd_offset[1 + i];
    not_spec = thd_type[i] != 2;
    thd_temp = P_arr[128 * gid(0) + lid(0)] * not_spec / (8314.4621 * phi[128 * gid(0) + lid(0)]);
    for (int ispec = offset; ispec <= -1 + spec_end; ++ispec)
    {
      spec_ind = thd_spec[ispec];
      thd_temp = thd_temp + (thd_eff[ispec] + -1.0 * not_spec) * conc[128 * gid(0) + lid(0) + work_size * 128 * spec_ind];
    }
    thd_conc[128 * gid(0) + lid(0) + work_size * 128 * i] = thd_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rateconst_fullfall(__global double const *__restrict__ phi, __global double *__restrict__ kf_fall)
{
  double Tinv;
  double logT;

  logT = log(fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)])));
  Tinv = 1.0 / fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  for (int i = 0; i <= 28; ++i)
    kf_fall[128 * gid(0) + lid(0) + work_size * 128 * i] = exp(fmin(690.775527898, fall_A[i] + logT * fall_beta[i] + -1.0 * fall_Ta[i] * Tinv));
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) red_pres(__global double const *__restrict__ phi, __global double const *__restrict__ thd_conc, __global double const *__restrict__ kf, __global double const *__restrict__ kf_fall, __global double *__restrict__ Pr)
{
  int i_0;
  int i_1;
  double k0;
  double kinf;

  for (int i = 0; i <= 28; ++i)
  {
    if (fall_type[i])
      kinf = kf_fall[128 * gid(0) + lid(0) + work_size * 128 * i];
    if (!fall_type[i])
      k0 = kf_fall[128 * gid(0) + lid(0) + work_size * 128 * i];
    i_1 = fall_to_thd_map[i];
    i_0 = fall_map[i];
    if (!fall_type[i])
      kinf = kf[128 * gid(0) + lid(0) + work_size * 128 * i_0];
    if (fall_type[i])
      k0 = kf[128 * gid(0) + lid(0) + work_size * 128 * i_0];
    Pr[128 * gid(0) + lid(0) + work_size * 128 * i] = thd_conc[128 * gid(0) + lid(0) + work_size * 128 * i_1] * k0 / kinf;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) fall_lind(__global double *__restrict__ Fi)
{
  int i_0;

  for (int i = 0; i <= 2; ++i)
  {
    i_0 = lind_map[i];
    Fi[128 * gid(0) + lid(0) + work_size * 128 * i_0] = 1.0;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) fall_troe(__global double const *__restrict__ Pr, __global double const *__restrict__ phi, __global double *__restrict__ Fi, __global double *__restrict__ Fcent, __global double *__restrict__ Atroe, __global double *__restrict__ Btroe)
{
  double Atroe_temp;
  double Btroe_temp;
  double Fcent_temp;
  double T;
  int i_0;
  double logFcent;
  double logPr;

  T = fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  for (int i = 0; i <= 25; ++i)
  {
    i_0 = troe_map[i];
    logPr = log10(fmax(1e-300, Pr[128 * gid(0) + lid(0) + work_size * 128 * i_0]));
    Fcent_temp = troe_a[i] * exp(fmin(690.775527898, -1.0 * T * troe_T1[i])) + (1.0 + -1.0 * troe_a[i]) * exp(fmin(690.775527898, -1.0 * T * troe_T3[i]));
    if (troe_T2[i] != 0.0)
      Fcent_temp = Fcent_temp + exp(fmin(690.775527898, -1.0 * troe_T2[i] / T));
    Fcent[128 * gid(0) + lid(0) + work_size * 128 * i] = Fcent_temp;
    logFcent = log10(fmax(1e-300, Fcent_temp));
    Btroe_temp = -1.1762 * logFcent + -1.0 * 0.14 * logPr + 0.806;
    Btroe[128 * gid(0) + lid(0) + work_size * 128 * i] = Btroe_temp;
    Atroe_temp = -0.67 * logFcent + logPr + -0.4;
    Atroe[128 * gid(0) + lid(0) + work_size * 128 * i] = Atroe_temp;
    Fi[128 * gid(0) + lid(0) + work_size * 128 * i_0] = pow(fmax(1e-300, Fcent_temp), 1.0 / (Atroe_temp * Atroe_temp / (Btroe_temp * Btroe_temp) + 1.0));
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rateconst_Kc(__global double const *__restrict__ b, __global double *__restrict__ Kc, __global double const *__restrict__ kf, __global double *__restrict__ kr)
{
  double B_sum;
  double Kc_temp;
  double P_sum;
  int P_sum_end;
  double P_val;
  int i_0;
  int net_nu;
  int offset;
  int spec_end;
  int spec_ind;

  for (int i = 0; i <= 308; ++i)
  {
    i_0 = rev_map[i];
    offset = net_reac_to_spec_offsets[i_0];
    if (!(nu_sum[i_0] > 0))
      P_val = 8314.4621 / 101325.0;
    if (nu_sum[i_0] > 0)
      P_val = 101325.0 / 8314.4621;
    P_sum_end = abs(nu_sum[i_0]);
    P_sum = fast_powi(P_val, P_sum_end);
    B_sum = 0.0;
    spec_end = net_reac_to_spec_offsets[i_0 + 1];
    for (int ispec = offset; ispec <= -1 + spec_end; ++ispec)
    {
      net_nu = reac_to_spec_nu[2 * ispec] + -1 * reac_to_spec_nu[1 + 2 * ispec];
      spec_ind = rxn_to_spec[ispec];
      if (net_nu != 0)
        B_sum = B_sum + net_nu * b[128 * gid(0) + lid(0) + work_size * 128 * spec_ind];
    }
    B_sum = exp(fmin(690.775527898, B_sum));
    Kc_temp = P_sum * B_sum;
    kr[128 * gid(0) + lid(0) + work_size * 128 * i] = kf[128 * gid(0) + lid(0) + work_size * 128 * i_0] / Kc_temp;
    Kc[128 * gid(0) + lid(0) + work_size * 128 * i] = Kc_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) ci_thd(__global double const *__restrict__ thd_conc, __global double *__restrict__ pres_mod)
{
  int i_0;

  for (int i = 0; i <= 11; ++i)
  {
    i_0 = thd_only_map[i];
    pres_mod[128 * gid(0) + lid(0) + work_size * 128 * i_0] = thd_conc[128 * gid(0) + lid(0) + work_size * 128 * i_0];
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) ci_fall(__global double const *__restrict__ Fi, __global double const *__restrict__ Pr, __global double *__restrict__ pres_mod)
{
  double ci_temp;
  int i_0;

  for (int i = 0; i <= 28; ++i)
  {
    i_0 = fall_to_thd_map[i];
    ci_temp = Fi[128 * gid(0) + lid(0) + work_size * 128 * i] / (1.0 + Pr[128 * gid(0) + lid(0) + work_size * 128 * i]);
    if (!fall_type[i])
      ci_temp = ci_temp * Pr[128 * gid(0) + lid(0) + work_size * 128 * i];
    pres_mod[128 * gid(0) + lid(0) + work_size * 128 * i_0] = ci_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rop_eval_fwd(__global double const *__restrict__ conc, __global double const *__restrict__ kf, __global double *__restrict__ rop_fwd)
{
  double rop_temp;
  int spec_ind;
  int spec_offset;
  int spec_offset_next;

  for (int i = 0; i <= 324; ++i)
  {
    rop_temp = kf[128 * gid(0) + lid(0) + work_size * 128 * i];
    spec_offset_next = net_reac_to_spec_offsets[1 + i];
    spec_offset = net_reac_to_spec_offsets[i];
    for (int ispec = spec_offset; ispec <= -1 + spec_offset_next; ++ispec)
    {
      spec_ind = rxn_to_spec[ispec];
      rop_temp = rop_temp * fast_powi(conc[128 * gid(0) + lid(0) + work_size * 128 * spec_ind], reac_to_spec_nu[1 + 2 * ispec]);
    }
    rop_fwd[128 * gid(0) + lid(0) + work_size * 128 * i] = rop_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rop_eval_rev(__global double const *__restrict__ conc, __global double const *__restrict__ kr, __global double *__restrict__ rop_rev)
{
  int i_0;
  double rop_temp;
  int spec_ind;
  int spec_offset;
  int spec_offset_next;

  for (int i = 0; i <= 308; ++i)
  {
    rop_temp = kr[128 * gid(0) + lid(0) + work_size * 128 * i];
    i_0 = rev_map[i];
    spec_offset_next = net_reac_to_spec_offsets[i_0 + 1];
    spec_offset = net_reac_to_spec_offsets[i_0];
    for (int ispec = spec_offset; ispec <= -1 + spec_offset_next; ++ispec)
    {
      spec_ind = rxn_to_spec[ispec];
      rop_temp = rop_temp * fast_powi(conc[128 * gid(0) + lid(0) + work_size * 128 * spec_ind], reac_to_spec_nu[2 * ispec]);
    }
    rop_rev[128 * gid(0) + lid(0) + work_size * 128 * i] = rop_temp;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) rop_net_fixed(__global double const *__restrict__ rop_fwd, __global double const *__restrict__ rop_rev, __global double const *__restrict__ pres_mod, __global double *__restrict__ rop_net)
{
  int i_0;
  int i_1;
  double net_rate;

  for (int i = 0; i <= 324; ++i)
  {
    net_rate = rop_fwd[128 * gid(0) + lid(0) + work_size * 128 * i];
    i_1 = rev_mask[i];
    if (i_1 >= 0)
      net_rate = net_rate + -1.0 * rop_rev[128 * gid(0) + lid(0) + work_size * 128 * i_1];
    i_0 = thd_mask[i];
    if (i_0 >= 0)
      net_rate = net_rate * pres_mod[128 * gid(0) + lid(0) + work_size * 128 * i_0];
    rop_net[128 * gid(0) + lid(0) + work_size * 128 * i] = net_rate;
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) spec_rates(__global double const *__restrict__ rop_net, __global double *__restrict__ wdot)
{
  double net_rate;
  int nu;
  int offset;
  int offset_next;
  int spec_ind;

  for (int i = 0; i <= 324; ++i)
  {
    net_rate = rop_net[128 * gid(0) + lid(0) + work_size * 128 * i];
    offset_next = net_reac_to_spec_offsets[1 + i];
    offset = net_reac_to_spec_offsets[i];
    for (int ispec = offset; ispec <= -1 + offset_next; ++ispec)
    {
      nu = reac_to_spec_nu[2 * ispec] + -1 * reac_to_spec_nu[1 + 2 * ispec];
      spec_ind = rxn_to_spec[ispec];
      wdot[128 * gid(0) + lid(0) + work_size * 128 * spec_ind] = wdot[128 * gid(0) + lid(0) + work_size * 128 * spec_ind] + nu * net_rate;
    }
  }
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) get_molar_rates(__global double const *__restrict__ phi, __global double *__restrict__ dphi, __global double const *__restrict__ wdot)
{
  double V_val;

  V_val = fmax(1e-30, phi[128 * gid(0) + lid(0) + work_size * 128]);
  for (int i = 0; i <= 51; ++i)
    dphi[128 * gid(0) + lid(0) + work_size * 128 * (2 + i)] = V_val * wdot[128 * gid(0) + lid(0) + work_size * 128 * i];
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) temperature_rate(__global double const *__restrict__ h, __global double const *__restrict__ cp, __global double const *__restrict__ conc, __global double *__restrict__ dphi, __global double const *__restrict__ wdot)
{
  double lower;
  double upper;

  upper = 0.0;
  lower = 0.0;
  for (int i = 0; i <= 52; ++i)
  {
    lower = lower + conc[128 * gid(0) + lid(0) + work_size * 128 * i] * cp[128 * gid(0) + lid(0) + work_size * 128 * i];
    upper = upper + h[128 * gid(0) + lid(0) + work_size * 128 * i] * wdot[128 * gid(0) + lid(0) + work_size * 128 * i];
  }
  dphi[128 * gid(0) + lid(0)] = dphi[128 * gid(0) + lid(0)] + -1.0 * upper / lower;
}
__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) get_extra_var_rates(__global double const *__restrict__ wdot, __global double *__restrict__ dphi, __global double const *__restrict__ phi, __global double const *__restrict__ P_arr)
{
  double T;
  double V_val;
  double dE;

  V_val = fmax(1e-30, phi[128 * gid(0) + lid(0) + work_size * 128]);
  T = fmin(10000.0, fmax(100.0, phi[128 * gid(0) + lid(0)]));
  dphi[128 * gid(0) + lid(0) + work_size * 128] = V_val * dphi[128 * gid(0) + lid(0)] / T;
  dE = 0.0;
  for (int i = 0; i <= 51; ++i)
    dE = dE + (1.0 + -1.0 * mw_factor[i]) * wdot[128 * gid(0) + lid(0) + work_size * 128 * i];
  dphi[128 * gid(0) + lid(0) + work_size * 128] = dphi[128 * gid(0) + lid(0) + work_size * 128] + V_val * dE * T * 8314.4621 / P_arr[128 * gid(0) + lid(0)];
}

__kernel void __attribute__ ((reqd_work_group_size(128, 1, 1))) species_rates(__global double const *__restrict__ t, __global double const *__restrict__ P_arr, __global double const *__restrict__ phi, __global double *__restrict__ dphi, __global double *__restrict__ rwk)
{
    __global double* __restrict__ Atroe = (rwk + 0 * work_size);
    __global double* __restrict__ Btroe = (rwk + 3328 * work_size);
    __global double* __restrict__ Fcent = (rwk + 6656 * work_size);
    __global double* __restrict__ Fi = (rwk + 9984 * work_size);
    __global double* __restrict__ Kc = (rwk + 13696 * work_size);
    __global double* __restrict__ Pr = (rwk + 53248 * work_size);
    __global double* __restrict__ b = (rwk + 56960 * work_size);
    __global double* __restrict__ conc = (rwk + 63744 * work_size);
    __global double* __restrict__ cp = (rwk + 70528 * work_size);
    __global double* __restrict__ h = (rwk + 97920 * work_size);
    __global double* __restrict__ kf = (rwk + 104704 * work_size);
    __global double* __restrict__ kf_fall = (rwk + 146304 * work_size);
    __global double* __restrict__ kr = (rwk + 150016 * work_size);
    __global double* __restrict__ pres_mod = (rwk + 189568 * work_size);
    __global double* __restrict__ rop_fwd = (rwk + 194816 * work_size);
    __global double* __restrict__ rop_net = (rwk + 236416 * work_size);
    __global double* __restrict__ rop_rev = (rwk + 278016 * work_size);
    __global double* __restrict__ thd_conc = (rwk + 317568 * work_size);
    __global double* __restrict__ wdot = (rwk + 322816 * work_size);
    ndot_reset(dphi);
    
    wdot_reset(wdot);
    
    get_concentrations(phi, P_arr, conc);
    
    a_only_simple(phi, kf);
    
    beta_int_simple(phi, kf);
    
    rateconst_fullsimple(phi, kf);
    
    eval_thd_body_concs(P_arr, phi, conc, thd_conc);
    
    rateconst_fullfall(phi, kf_fall);
    
    red_pres(phi, thd_conc, kf, kf_fall, Pr);
    
    fall_lind(Fi);
    
    fall_troe(Pr, phi, Fi, Fcent, Atroe, Btroe);
    
    eval_b(phi, b);
    
    rateconst_Kc(b, Kc, kf, kr);
    
    ci_thd(thd_conc, pres_mod);
    
    ci_fall(Fi, Pr, pres_mod);
    
    rop_eval_fwd(conc, kf, rop_fwd);
    
    rop_eval_rev(conc, kr, rop_rev);
    
    rop_net_fixed(rop_fwd, rop_rev, pres_mod, rop_net);
    
    spec_rates(rop_net, wdot);
    
    get_molar_rates(phi, dphi, wdot);
    
    eval_h(phi, h);
    
    eval_cp(phi, cp);
    
    temperature_rate(h, cp, conc, dphi, wdot);
    
    get_extra_var_rates(wdot, dphi, phi, P_arr);
}

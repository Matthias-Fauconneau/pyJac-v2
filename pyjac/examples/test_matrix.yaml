# an example of specifying the test matrix for pyJac's performance or validation


# mechanisms are specified by a name and cantera format mechanism and optional path
model-list:
  - name: TestMech
    mech: test.cti
    # specify the path to the model -- if not specified, the model is assumed to
    # be in either validation/name/ or performance/name/ depending on the test type
    path: 'pyjac/tests/'
    # limit the number of initial conditions tested (usually, due to memory
    # limitations)
    limits:
      species_rates: 10000000
      jacobian:
        sparse:
          100000
        full:
          1000
  - name: CH4
    # alternatively, one can specify the path to Null in order to load default
    # cantera mechnisms
    path:
    mech: gri30.cti

# list of platforms to use
platform-list:
  - name: intel
    lang: opencl
    vectype: [wide, par]
    # use a vector width of 2, 4 & 8
    vecwidth: [2, 4, 8]
    atomics: False
  - name: OpenMP
    lang: c
    vectype: [par]

# test list
test-list:
  # a validation test for both spurce rates & jacobian
  - type: validation
    eval-type: both
  # source rate performance test
  - type: performance
    eval-type: species_rates
    # overrides, controlling the species_rates test
    species_rates:
      order: 'F'
# a performance test for the jacobian
  - type: performance
    # limit to intel
    platforms: intel
    eval-type: jacobian
    overrides:
      # overrides, controlling the finite_difference tests
      finite-difference:
        # limit number of cores
        num_cores: 1
        # use only parallel FD-evaluation
        vecwidth: []
        vectype: 'par'
        # C-order only
        order: 'C'
        # conp-only
        conp: 'conp'
      # overrides for the exact jacobian
      exact:
        # only test vector width of 4
        vecwidth: 4

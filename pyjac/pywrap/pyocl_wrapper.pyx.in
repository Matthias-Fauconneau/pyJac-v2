# distutils: language = c++

import cython
import numpy as np
cimport numpy as np

'''[[[cog
from textwrap import indent
from six.moves import cPickle as pickle
from pyjac.utils import indent as stdindent
with open(wrappergen, 'rb') as file:
    wrappergen = pickle.load(file)

kernel_args =  ', '.join(['double* {}'.format(x) for x in wrappergen.kernel_args])
kernel_name = '{name}Kernel'.format(name=wrappergen.name.title())
# write Cython defns
cog.outl("""
cdef extern from "{name}_main.oclh":
    cdef cppclass {kernel_name}:
        {kernel_name}() except +
        {kernel_name}(size_t, size_t) except +
        void resize(size_t, size_t) except +
        void operator()({args}) except +
        void finalize() except +
    """.format(name=wrappergen.name, kernel_name=kernel_name, args=kernel_args),
        trimblanklines=True, dedent=False)
   ]]]
[[[end]]]'''


'''[[[cog
# and write the python wrapper class
# get args
numpy_args = []
args = []
for arg in wrappergen.kernel_args:
    numpy_args.append('np.ndarray[np.float64_t] {name}'.format(name=arg))
    args.append('&{arg}[0]'.format(arg=arg))
numpy_args = ', '.join(numpy_args)
args = ', '.join(args)

cog.outl("""
cdef class Py{name}:
    cdef {name} kernel  # hold our kernel

    def __cinit__(self, size_t problem_size, size_t work_size):
        self.kernel.resize(problem_size, work_size)

    def __dealloc__(self):
        self.kernel.finalize()

    def resize(self, np.uint_t problem_size, np.uint_t work_size):
        \"\"\"
        Resize the OpenCL memory buffers

        Parameters
        ----------
        problem_size: unsigned int
            The number of initial conditions to evaluate
        work_size: unsigned int
            For CPUs, the number of cores to use.
            For GPUs, the number of thread-blocks to run.
        \"\"\"
        self.kernel.resize(problem_size, work_size)

    def __call__(self, {numpy_args}):
        self.kernel({args})
""".format(name=kernel_name, numpy_args=numpy_args, args=args))
]]]
[[[end]]]'''

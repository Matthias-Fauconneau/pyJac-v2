import cython
import numpy as np
cimport numpy as np

cdef int compiled = 0

cdef extern from "${knl}_kernel_main.oclh":
    void ${knl}_kernel_call(np.uint_t problem_size, np.uint_t num_devices, double* phi, double* param, double* out)
    void finalize()
    void compiler()

@cython.boundscheck(False)
@cython.wraparound(False)
def ${knl}(np.uint_t problem_size,
            np.uint_t num_devices,
            np.ndarray[np.float64_t] phi,
            np.ndarray[np.float64_t] param,
            np.ndarray[np.float64_t] out):
    global compiled
    if not compiled:
        compiler()
        compiled = True
    ${knl}_kernel_call(problem_size, num_devices, &phi[0], &param[0], &out[0])
    return None

def __dealloc__(self):
    finalize()
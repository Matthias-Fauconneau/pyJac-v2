# A schema to validate platform specification for pyJac

platform: any(include('variable-platform'), include('single-platform'), required=True)
---
variable-platform:
    # the platform name -- on OpenCL this doubles as a string identifier
    # to passed to the ICD loader to use the correct OpenCL library at
    # runtime
    name: str(required=True)
    lang: str(lang, required=True)
    vectype: list(vectype, required=True)
    vecwidth: list(pow2, required=True, min=2)
    # If True, the platform / language support atomics for deep-vectorization
    # Default: True
    atomics: bool(required=False)
    memory_limits: include('memory_limits', required=False)

---
single-platform:
    name: str(required=True)
    lang: str(lang, required=True)
    vectype: str(vectype, required=True)
    vecwidth: int(pow2, required=False, min=2)
    # If True, the platform / language support atomics for deep-vectorization
    # Default: True
    atomics: bool(required=False)
    memory_limits: include('memory_limits', required=False)

---
memory_limits:
    # limit on total global memory allocation by pyJac
    global: str(bytes, required=False)
    # limit on total __local/ shared memory allocation by pyJac, only applies to OpenCL /
    # CUDA
    local: str(bytes, required=False)
    # limit on total __constant memory allocation by pyJac, only applies to OpenCL / CUDA
    constant: str(bytes, required=False)
    # limit on the maximum global memory allocation per array by pyJac,
    # only applies to OpenCL
    alloc: str(bytes, required=False)
